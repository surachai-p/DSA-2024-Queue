### คำถามท้ายการทดลอง

#1. Queue ต่างจาก Stack อย่างไร?
#Ans Queue และ Stack เป็นโครงสร้างข้อมูลที่มีวิธีจัดการข้อมูลต่างกัน
#Queue (คิว):ใช้หลักการ FIFO (First In, First Out) คือข้อมูลที่เข้ามาก่อนจะถูกนำออกก่อน
#การดำเนินการที่เกี่ยวข้อง:
#enqueue: เพิ่มข้อมูลที่ปลายสุดของคิว
#dequeue: นำข้อมูลที่หัวคิวออก
#Stack (สแตก):ใช้หลักการ LIFO (Last In, First Out) คือข้อมูลที่เข้ามาล่าสุดจะถูกนำออกก่อน
#การดำเนินการที่เกี่ยวข้อง:
#push: เพิ่มข้อมูลที่ปลายสุดของสแตก
#pop: นำข้อมูลที่ปลายสุดของสแตกออก


#2. เพราะเหตุใดการ dequeue จึงใช้ pop(0) แทนที่จะเป็น pop()?
#Ans การใช้ pop(0) จะลบข้อมูลจากตำแหน่ง 0 (ข้อมูลที่อยู่หัวคิว) ซึ่งสอดคล้องกับหลักการของ FIFO ที่ต้องนำข้อมูลที่เข้ามาก่อนออกก่อน
#หากใช้ pop() (ค่าดีฟอลต์ลบข้อมูลท้ายลิสต์) จะไม่ตรงกับพฤติกรรมของคิว แต่จะเหมือนกับสแตกแทน (LIFO)

#3. ยกตัวอย่างการประยุกต์ใช้ Queue ในชีวิตประจำวันมา 3 ตัวอย่าง
#Ans 1.การต่อคิวในโรงพยาบาล/คลินิก: คนไข้ที่มาถึงก่อนจะได้รับการตรวจรักษาก่อน การลงทะเบียนหรือรอพบแพทย์
#2.ระบบการจัดการคำขอ API (API Request Queue):ในการพัฒนาเว็บไซต์หรือแอปพลิเคชันที่มีการร้องขอข้อมูลจากเซิร์ฟเวอร์หลายคำขอพร้อมกัน คิวจะถูกใช้เพื่อจัดลำดับการประมวลผลคำขอตามลำดับการเข้าถึง
#3.การสั่งอาหารในร้านอาหาร:ลูกค้าที่มาถึงก่อนจะได้รับเมนูหรือบริการก่อน เช่น การรออาหารที่ร้าน fast-food หรือร้านเครื่องดื่ม

#4. หากต้องการทำ Priority Queue จะต้องปรับปรุงโค้ดอย่างไร?
#Ans Priority Queue คือคิวที่ข้อมูลจะถูกจัดลำดับตามความสำคัญก่อนการนำออก โดยข้อมูลที่มีลำดับความสำคัญสูงกว่าจะถูกนำออกก่อน (ไม่จำเป็นต้องเป็น FIFO)
#วิธีปรับปรุงโค้ด:
#ใช้โครงสร้างข้อมูลที่เหมาะสม:ใช้ heap (เช่น heapq ใน Python) ซึ่งเป็นโครงสร้างข้อมูลที่ช่วยให้การจัดเรียงลำดับความสำคัญมีประสิทธิภาพ
#เก็บข้อมูลพร้อมลำดับความสำคัญ: ใช้ทูเพิล (priority, data) โดย priority เป็นค่าลำดับความสำคัญ (ค่าตัวเลขที่ต่ำกว่ามีความสำคัญมากกว่า)